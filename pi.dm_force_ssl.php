<?php
/**
 * DM Force SSL for Expression Engine 2
 * (C) 2010 DM Logic
 *
 * Use as you see fit, but at your own risk...
 */

if ( ! defined('BASEPATH')) exit('No direct script access allowed');

$plugin_info = array(
		'pi_name'           => 'DM Force SSL',
		'pi_version'        => '1.0',
		'pi_author'         => 'Darren Miller',
		'pi_author_url'     => 'http://dmlogic.com/',
		'pi_description'    => 'Ensure that a template is displayed under https',
		'pi_usage'          => Dm_force_ssl::usage()
);

class Dm_force_ssl {

	/**
	 * Constructor function
	 */
	function Dm_force_ssl() {
		$this->EE =& get_instance();
	}

	// -----------------------------------------------------------------

	/**
	 * Force a page to be SSL
	 */
	public function force() {

		// no SSL required? then nothing to do
		if(!$this->EE->config->item('force_ssl')) {
			return;
		}

		// attempt to ensure any subsequent code executed knows we're in SSL now (e.g. form declarations etc)
		$this->set_configs('http://','https://');

		// already SSL? Great!
		if($this->is_ssl()) {
			return;
		}

		// made it this far? time to redirect
		$this->redirect();
	}

	// -----------------------------------------------------------------

	/**
	 * Force a page out of SSL
	 */
	public function unforce() {

		// not SSL? Great!
		if(!$this->is_ssl()) {
			return;
		}

		// attempt to ensure any subsequent code executed knows we're in SSL now (e.g. form declarations etc)
		$this->set_configs('https://','http://');

		// go
		$this->redirect();

	}

	// -----------------------------------------------------------------

	/**
	 * Ensure that the form actions match the protocol,
	 * without actually redirecting
	 */
	public function form_paths() {

		// we don't mind https forms on a http page
		if(!$this->is_ssl()) {
			return;
		}

		$this->set_configs('http://','https://');

	}

	// -----------------------------------------------------------------

	/**
	 * Adjust global configs to suit our wishes
	 * This should ensure that any modules or add-ons generate paths
	 * with the correct protocol
	 *
	 * @param string $a search for
	 * @param string $b replace with
	 */
	private function set_configs($a,$b) {

		$site_url = str_replace($a, $b, $this->EE->config->item('base_url'));
		$this->EE->config->set_item('base_url',$site_url);
		$this->EE->config->set_item('site_url',$site_url);
	}

	// -----------------------------------------------------------------

	/**
	 * Do whatever we need to do to redirect
	 */
	private function redirect() {

		// never know if this is pre-loaded or not...
		$this->EE->load->helper('url');

		// first ensure any flash data we want persists
		$this->persist_flashdata();

		// our work above has already made current_url() the correct protocol, so simply reload
		redirect(current_url());
	}

	// -----------------------------------------------------------------

	/**
	 * Check if we are currently on a HTTPS connection
	 *
	 * @todo check this on environments other than Apache
	 * @return boolean
	 */
	private function is_ssl() {

		if(array_key_exists('HTTPS', $_SERVER)) {
			return true;
		}

		return false;
	}

	// -----------------------------------------------------------------

	/**
	 * Ensure requried flashdata keys are retained after the redirect
	 * This is built in to CI, so thanks a bunch for bypassing it EE!
	 */
	private function persist_flashdata() {

		$flashkeys = $this->EE->TMPL->fetch_param('persist_flashdata');
		if($flashkeys == FALSE) {
			return;
		}

		foreach(explode(',',$flashkeys) as $key) {

			if(isset($this->EE->session->flashdata[$key])) {
				$this->EE->session->flashdata[':new:'.$key] = $this->EE->session->flashdata[$key];
				$this->EE->session->_set_flash_cookie();
			}
		}
	}

	// -----------------------------------------------------------------

	/**
	 * Usage summary
	 *
	 * @return string
	 */
	function usage() {
		ob_start();
		?>
First add a value to your config file:
$config['force_ssl'] = true;
Toggle true/false to turn this plugin on/off

The following tags are availble and must be the very first item in your templates.

{exp:dm_force_ssl:force persist_flashdata="key,key,key"}
Force a template to use SSL. If, like me, you use a lot of flashdata in your apps, you can ensure that any values
persist across the redirect by including their key names, comma separated, in the optional persist_flashdata parameter

{exp:dm_force_ssl:unforce}
Identical to above, except forces a page to not use SSL. Useful if your navigation is not absolute as it allows
an escape from server-hungry SSL requests

{exp:dm_force_ssl:form_paths}
This is useful if you need to ensure that any absolute form action paths generated by subsequent {exp} tags (for example Search)
retain any current https protocol. No redirect is made, but the core system variables are adjusted.

		<?php
		$buffer = ob_get_contents();

		ob_end_clean();

		return $buffer;
	}
	/* END */
}
